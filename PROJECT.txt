@filesource

* @version $Revision$
* @modifiedby $LastChangedBy$
* @lastmodified $Date$
* @author $Author$
* @license http://www.opensource.org/licenses/mit-license.php The MIT License


CODE ORGANIZATION


PROJECT STRUCTURE : Application, Modules and Actions
 
 
PROJECT TREE STRUCTURE

application/
  [application name1]/
  [application name2]/
  .../
batch/
cache/
config/
data/
  sql/
docs/ 
library/ 
  [library name1]/
  [library name2]/
  .../
logs/
plugins/
test/
  unit/
  functional/
public/
  css/
  images/
  js/
  uploads/
README.txt
LICENSE.txt
index.php

  
DIRECTORY DESCRIPTION

apps/		Contains one directory for each application of the project (typically, it will house the MVC system, as well as conifgurations, services used, and your bootstrap file.).
batch/		Contains PHP scripts called from a command line or a scheduler, to run batch processes.
cache/		Contains the cached version of the configuration, and (if you activate it) the cache version of the actions and templates of the project. The cache mechanism (detailed in Chapter 12) uses these files to speed up the answer to web requests. Each application will have a subdirectory here, containing preprocessed PHP and HTML files.
config/		Holds the general configuration of the project.
data/		Here, you can store the data files of the project, like a database schema, a SQL file that creates tables, or even a SQLite database file.
docs/		Stores the project documentation, including your own documents and the documentation generated by PHPdoc.
library/	Dedicated to foreign classes or libraries. Here, you can add the code that needs to be shared among your applications. The model/ subdirectory stores the object model of the project (described in Chapter 8).
log/		Stores the applicable log files generated directly by symfony. It can also contain web server log files, database log files, or log files from any part of the project. Symfony creates one log file per application and per environment (log files are discussed in Chapter 16).
plugins/	Stores the plug-ins installed in the application (plug-ins are discussed in Chapter 17).
test/		Contains unit and functional tests written in PHP and compatible with the symfony testing framework (discussed in Chapter 15). During the project setup, symfony automatically adds some stubs with a few basic tests.
web/		The root for the web server. The only files accessible from the Internet are the ones located in this directory.

note : Bootstrap.php - This file is the entry point for your application. The purpose for this file is to bootstrap the application and make components available to the application by initializing them.

APPLICATION STRUCTURE

apps/
  [application name]/
    config/
    i18n/
    lib/		
    modules/
    layouts/
      layout.php
      error.php
      error.txt

DIRECTORY DESCRIPTION

config/		Holds a hefty set of YAML configuration files. This is where most of the application configuration is, apart from the default parameters that can be found in the framework itself. Note that the default parameters can still be overridden here if needed. You'll learn more about application configuration in the Chapter 5.
i18n/		Contains files used for the internationalization of the application--mostly interface translation files (Chapter 13 deals with internationalization). You can bypass this directory if you choose to use a database for internationalization.
lib/		Contains classes and libraries that are specific to the application.
modules/	Stores all the modules that contain the features of the application.
templates/	Lists the global templates of the application--the ones that are shared by all modules. By default, it contains a layout.php file, which is the main layout in which the module templates are inserted.

MODULE STRUCTURE

Each application contains one or more modules. Each module has its own subdirectory in the modules directory, and the name of this directory is chosen during the setup.

apps/
  [application name]/
    modules/
      [module name]/
		api/ 
		controllers/ 
        models/ 
        views/ 
        config/
        lib/
        layout/
            indexSuccess.php
        validate/
		config/ 


DIRECTORY DESCRIPTION

actions/	Generally contains a single class file named actions.class.php, in which you can store all the actions of the module. You can also write different actions of a module in separate files.
config/		Can contain custom configuration files with local parameters for the module.
lib/		Stores classes and libraries specific to the module.
templates/	Contains the templates corresponding to the actions of the module. A default template, called indexSuccess.php, is created during module setup.
validate/	Dedicated to configuration files used for form validation (discussed in Chapter 10).

note : The config/, lib/, and validate/ directories are empty for a new module.

WEB STRUCTURE

There are very few constraints for the web directory, which is the directory of publicly accessible files. Following a few basic naming conventions will provide default behaviors and useful shortcuts in the templates. Here is an example of a web directory structure:

web/
  css/
  images/
  js/
  uploads/
  
DIRECTORY DESCRIPTION

css/		Contains style sheets with a .css extension.
images/		Contains images with a .jpg, .png, or .gif format.
js/			Holds JavaScript files with a .js extension.
uploads/	Must contain the files uploaded by the users. Even though the directory usually contains images, it is distinct from the images directory so that the synchronization of the development and production servers does not affect the uploaded images.
